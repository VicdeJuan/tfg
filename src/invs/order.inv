\paragraph{vars:}

tid i

\paragraph{invariant [order] :}

   rd(heap, head).data = lowestElem
   rd(heap, tail).data = highestElem

   @main_e(i). $\to$ (main::e(i) != lowestElem $\wedge$ main::e(i) != highestElem)
   @search_body(i). $\to$ (search::e(i) != lowestElem $\wedge$ search::e(i) != highestElem)

#insert_bounded_e:
   @insert_body(i). $\to$ (insert::e(i) != lowestElem $\wedge$ insert::e(i) != highestElem)

#remove_bounded_e:
   @remove_body(i). $\to$ (remove::e(i) != lowestElem $\wedge$ remove::e(i) != highestElem)



///////  Search   /////////////////////////


#search_curr_bounded:
   @sch_after_lookup(i). $\to$
      (rd(heap,search::curr(i)).data > search::e(i) $\vee$
       rd(heap,search::curr(i)).data = search::e(i))

   @sch_prev_def(i). $\to$ (rd(heap, search::prev(i)).data < rd(heap, tail).data $\vee$
                         rd(heap, search::prev(i)).data = rd(heap, tail).data)
   @sch_while_begins(i). $\to$ rd(heap, search::curr(i)).data < search::e(i)

#search_prev_lower:
   @sch_prev_lower(i). $\to$ rd(heap, search::prev(i)).data < search::e(i)



///////  Insert   /////////////////////////


   @ins_curr_def(i). $\to$ (rd(heap, insert::curr(i)).data < rd(heap, tail).data $\vee$
                         rd(heap, insert::curr(i)).data = rd(heap, tail).data)
   @ins_prev_def(i). $\to$ (rd(heap, insert::prev(i)).data < rd(heap, tail).data $\vee$
                         rd(heap, insert::prev(i)).data = rd(heap, tail).data)
   @ins_while_begins(i). $\to$ rd(heap, insert::curr(i)).data < insert::e(i)

#insert_prev_lower:
   @ins_prev_lower(i). $\to$ rd(heap, insert::prev(i)).data < insert::e(i)

#insert_curr_higher:
   @ins_insert(i). $\to$ rd(heap, insert::curr(i)).data > insert::e(i)

#insert_aux_is_e:
   @after_malloc(i). $\to$ rd(heap, insert::aux(i)).data = insert::e(i)

#insert_curr_bounded:
   @ins_final_conditional(i). $\to$
      (rd(heap,insert::curr(i)).data > insert::e(i) $\vee$
       rd(heap,insert::curr(i)).data = insert::e(i))


///////  Remove   /////////////////////////


#remove_curr_is_e:
   @rem_remove(i). $\to$ rd(heap, remove::curr(i)).data = remove::e(i)

#remove_curr_bounded:
   @rem_final_conditional(i). $\to$
      (rd(heap,remove::curr(i)).data > remove::e(i) $\vee$
       rd(heap,remove::curr(i)).data = remove::e(i))

   @rem_prev_def(i). $\to$ (rd(heap, remove::prev(i)).data < rd(heap, tail).data $\vee$
                         rd(heap, remove::prev(i)).data = rd(heap, tail).data)
   @rem_while_begins(i). $\to$ rd(heap, remove::curr(i)).data < remove::e(i)

#remove_prev_lower:
   @rem_prev_lower(i). $\to$ rd(heap, remove::prev(i)).data < remove::e(i)
